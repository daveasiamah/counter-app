{"version":3,"sources":["components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","state","count","tags","incrementCount","setState","decrementCount","formatCounter","getBadgeClasses","classes","renderTags","length","map","tag","id","key","this","className","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAiEeA,E,2MA9DbC,MAAQ,CACNC,MAAO,EACPC,KAAM,CAAC,OAAQ,OAAQ,S,EAGzBC,eAAiB,WACf,EAAKC,UAAS,kBAAgB,CAAEH,MAAlB,EAAGA,MAA8B,O,EAGjDI,eAAiB,WACf,EAAKD,UAAS,kBAAgB,CAAEH,MAAlB,EAAGA,MAA8B,O,EAGjDK,cAAgB,WAAO,IACbL,EAAU,EAAKD,MAAfC,MACR,OAAiB,IAAVA,EAAc,OAASA,G,EAGhCM,gBAAkB,SAAAN,GAChB,IAAIO,EAAU,mBAEd,OADAA,GAAqB,IAAVP,EAAc,UAAYA,EAAQ,EAAI,UAAY,U,EAI/DQ,WAAa,WACX,OAA+B,IAA3B,EAAKT,MAAME,KAAKQ,OAAqB,iDAEvC,4BACG,EAAKV,MAAME,KAAKS,KAAI,SAACC,EAAKC,GAAN,OACnB,wBAAIC,IAAKD,GAAKD,Q,wEAMZ,IACAX,EAAUc,KAAKf,MAAfC,MACR,OACE,yBAAKe,UAAU,aACb,wBAAIA,UAAU,UAAd,kBACA,uBAAGA,UAAU,oBAAb,eACA,0BAAMA,UAAWD,KAAKR,gBAAgBN,IACnCc,KAAKT,iBAER,4BAAQU,UAAU,wBAAwBC,QAASF,KAAKZ,gBAAxD,eAGA,4BAAQa,UAAU,wBAAwBC,QAASF,KAAKV,gBAAxD,eAIA,6BAC8B,IAA3BU,KAAKf,MAAME,KAAKQ,QACf,4BAAQM,UAAU,mBAAlB,YAEDD,KAAKN,mB,GAxDMS,aCSPC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f0f5b27f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    count: 0,\r\n    tags: [\"tag1\", \"tag2\", \"tag3\"]\r\n  };\r\n\r\n  incrementCount = () => {\r\n    this.setState(({ count }) => ({ count: count + 1 }));\r\n  };\r\n\r\n  decrementCount = () => {\r\n    this.setState(({ count }) => ({ count: count - 1 }));\r\n  };\r\n\r\n  formatCounter = () => {\r\n    const { count } = this.state;\r\n    return count === 0 ? \"Zero\" : count;\r\n  };\r\n\r\n  getBadgeClasses = count => {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += count === 0 ? \"warning\" : count > 0 ? \"primary\" : \"danger\";\r\n    return classes;\r\n  };\r\n\r\n  renderTags = () => {\r\n    if (this.state.tags.length === 0) return <p>There are no tags.</p>;\r\n    return (\r\n      <ul>\r\n        {this.state.tags.map((tag, id) => (\r\n          <li key={id}>{tag}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { count } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <h3 className=\"header\">Learning React</h3>\r\n        <p className=\"lead bg-darken-2\">Counter App</p>\r\n        <span className={this.getBadgeClasses(count)}>\r\n          {this.formatCounter()}\r\n        </span>\r\n        <button className=\"btn btn-secondary m-2\" onClick={this.incrementCount}>\r\n          Increment +\r\n        </button>\r\n        <button className=\"btn btn-secondary m-2\" onClick={this.decrementCount}>\r\n          Decrement -\r\n        </button>\r\n\r\n        <div>\r\n          {this.state.tags.length === 0 && (\r\n            <button className=\"btn btn-primary\">Add Tags</button>\r\n          )}\r\n          {this.renderTags()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\nimport Counter from \"./components/Counter\";\n\nfunction App() {\n  return (\n    <>\n      <Counter />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}